buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.jsoup:jsoup:1.11.2'
  }
}

plugins {
  id 'org.jetbrains.kotlin.jvm' version '1.2.20'
  id 'maven-publish'
  id 'com.jfrog.bintray' version '1.7.3'
}

group 'info.jdavid.server'
version '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

println "Java version: ${System.getProperty('java.version')}"

ext {
  bintrayApiKey = new File("$projectDir/local.properties").with {
    if (it.exists()) {
      it.text.readLines().findResult {
        it.trim().split('=').with { it && it[0] == 'bintrayApiKey' ? it[1] : null }
      }
    }
    else null
  }
}

repositories {
  jcenter()
}

dependencies {
  compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
  compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.21.2'
  compile 'org.jetbrains.kotlinx:kotlinx-coroutines-nio:0.21.2'
  compile 'org.slf4j:slf4j-api:1.7.25'
  compile 'com.codahale:aes-gcm-siv:0.4.2'
  testCompile 'junit:junit:4.12'
  testCompile 'com.fasterxml.jackson.core:jackson-databind:2.9.3'
  testCompile 'org.apache.httpcomponents:httpclient:4.3.6'
  testRuntime 'org.slf4j:slf4j-jdk14:1.7.25'
}

compileKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}

compileTestKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}

kotlin {
  experimental {
    coroutines "enable"
  }
}

jar {
  manifest {
    attributes Sealed: true
  }
}

test {
  jvmArgs '-XX:+IgnoreUnrecognizedVMOptions'
  jvmArgs '--permit-illegal-access'
  jvmArgs '--show-version'
  doLast {
    File html = reports.html.entryPoint
    def doc = org.jsoup.Jsoup.parse(html, 'UTF-8')
    int total = doc.select('#tests > .counter').text() as int
    int failed = doc.select('#failures > .counter').text() as int
    def readme = file('README.md')
    def badge = { String label, String text, String color ->
      "https://img.shields.io/badge/_${label}_-${text}-${color}.png?style=flat"
    }
    String color = failed == 0 ? 'green' : (failed < 3 ? 'yellow' : 'red')
    String v = project.version
    def download =
      "https://bintray.com/artifact/download/programingjd/maven/info/jdavid/ok/json/okjson/$v/okjson-${v}.jar"
    readme.readLines().withIndex().collect { line, i ->
      switch (i) {
        case 0:
          return "![jcenter](${badge('jcenter', v, '6688ff')}) &#x2003; " +
                 "![jcenter](${badge('Tests', "${total-failed}/${total}", color)})"
        case 9: return "[Download](${download}) the latest jar."
        case 19: return "  <version>${v}</version>"
        case 32: return "  compile 'info.jdavid.ok.json:okjson:${v}'"
        default: return line
      }
    }.join('\n').with { readme.text = it }
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project.group
      artifactId 'server'
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
  repositories {
    maven {
      url "$buildDir/repo"
    }
  }
}

bintray {
  user = 'programingjd'
  key = bintrayApiKey
  dryRun = false
  publish = true
  publications = ['mavenJava']
  pkg {
    repo = 'maven'
    name = 'info.jdavid.server'
    websiteUrl = 'https://github.com/programingjd/server'
    issueTrackerUrl = 'https://github.com/programingjd/server/issues'
    vcsUrl = 'https://github.com/programingjd/server.git'
    githubRepo = 'programingjd/server'
    githubReleaseNotesFile = 'README.md'
    licenses = ['Apache-2.0']
    labels = ['server','http','java','kotlin','coroutines']
    publicDownloadNumbers = true
    version {
      name = project.version
      mavenCentralSync {
        sync = false
      }
    }
  }
}
